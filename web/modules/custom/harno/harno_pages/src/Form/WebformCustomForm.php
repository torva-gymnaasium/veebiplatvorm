<?php

namespace Drupal\harno_pages\Form;

use Drupal\Core\Ajax\HtmlCommand;
use Drupal\Core\Ajax\InsertCommand;
use Drupal\Core\Ajax\InvokeCommand;
use Drupal\Core\Ajax\OpenModalDialogCommand;
use Drupal\Core\Ajax\RedirectCommand;
use Drupal\Core\Ajax\ReplaceCommand;
use Drupal\Core\Form\FormBase;
use Drupal\Core\Form\FormStateInterface;
use Drupal\harno_pages\Controller\ContactsController;
use Drupal\Core\Entity\Element\EntityAutocomplete;
use Drupal\Core\Ajax\AjaxResponse;

/**
 *
 */
class WebformCustomForm extends FormBase {

  /**
   * {@inheritdoc}
   */
  public function getFormId() {
    return 'custom_webform';
  }

  /**
   * {@inheritdoc}
   */
  public function buildForm(array $form, FormStateInterface $form_state, $webformID = NULL, $webform = null, $nid = null) {

//    dump($webformID);
//    dump($webform);
//    dump($webform->getElementsDecodedAndFlattened());
//    dump($nid);
    if(!$webform){
      return;
    }
//    $elements = $webform->getElementsDecodedAndFlattened();
//    $form = [];
//    foreach ($elements as $key => $element){
//      foreach($element as $k => $item){
//        if($k == '#required'){continue;}
//        if($k == '#description'){continue;}
//        $form[$key][$k] = $item;
//      }
//    }
//
//    $form['submit'] = [
//      '#type' => 'submit',
//      '#title' => $this->t('Submit'),
//      '#value' => $this->t('Submit'),
//      '#ajax' => array(
//        'callback' => '::ajaxCallback',
//        'progress' => array(
//          'type' => 'throbber',
//          'message' => NULL,
//        ),
//      )
//    ];
    $form['submit'] = [
      '#type' => 'submit',
      '#value' => $webform->label(),
      '#ajax' => array(
        'callback' => '::ajaxCallback',
        'progress' => array(
          'type' => 'throbber',
          'message' => NULL,
        ),
      ),
      '#attributes' => [
        'style' => 'width: unset !important;',
      ],
    ];
    $form['#wID'] = $webformID;
    $form['#wLabel'] = $webform->label();
    $form['#attributes']['class'][] = 'contextual-region form-group';
    $form['#attributes']['novalidate'] = 'novalidate';
    return $form;
  }

  /**
   * {@inheritdoc}
   */
  public function submitForm(array &$form, FormStateInterface $form_state) {
//    $article_id = EntityAutocomplete::extractEntityIdFromAutocompleteInput($form_state->getValue('article'));
//    $filter_values = $form_state->getValues();
//    $form_state->getValue('top','departments');
//    $form_state->setValue('departments', $filter_values['departments']);
//    $form_state->disableRedirect(true);
//    $form_state->setRebuild(False);
  }
  public function validateForm(array &$form, FormStateInterface $form_state)
  {
    parent::validateForm($form, $form_state); // TODO: Change the autogenerated stub
  }
  public function ajaxCallback(array $form, FormStateInterface $form_state) {
    $response = new AjaxResponse();
    $output['add_form'] = [
      '#type' => 'webform',
      '#webform' => $form['#wID'],
    ];
    $options['width'] = 1000;
    $response->addCommand(new OpenModalDialogCommand($form['#wLabel'], $output, $options));
//    $response->addAttachments(['library'=>'harno_pages/accordion']);
//    $submitter = \Drupal::service('form_submitter');
//    $redirect = $submitter->redirectForm($form_state);
//    $response->addCommand(new RedirectCommand($redirect->getTargetUrl()));
    return $response;
  }
}
//<button class="btn btn-close">
//  <span class="sr-only">close modal</span>
//  <i class="mdi mdi-close" data-close="true"></i>
//</button>
